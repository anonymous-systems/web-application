{"version":3,"file":"angular-firebase-storage-manager.mjs","sources":["../../../projects/angular-firebase-storage-manager/src/lib/components/new-folder-dialog/new-folder-dialog.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/new-folder-dialog/new-folder-dialog.component.html","../../../projects/angular-firebase-storage-manager/src/lib/components/delete-files-dialog/delete-files-dialog.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/delete-files-dialog/delete-files-dialog.component.html","../../../projects/angular-firebase-storage-manager/src/lib/components/storage-item-icon/storage-item-icon.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/storage-item-icon/storage-item-icon.component.html","../../../projects/angular-firebase-storage-manager/src/lib/pipes/format-bytes.pipe.ts","../../../projects/angular-firebase-storage-manager/src/lib/services/console-logger.service.ts","../../../projects/angular-firebase-storage-manager/src/lib/services/firebase-storage.service.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/storage-file-preview/storage-file-preview.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/storage-file-preview/storage-file-preview.component.html","../../../projects/angular-firebase-storage-manager/src/lib/directives/file-dropzone.directive.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/loading/loading.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/loading/loading.component.html","../../../projects/angular-firebase-storage-manager/src/lib/components/loading-or-error/loading-or-error.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/components/loading-or-error/loading-or-error.component.html","../../../projects/angular-firebase-storage-manager/src/lib/file-manager.component.ts","../../../projects/angular-firebase-storage-manager/src/lib/file-manager.component.html","../../../projects/angular-firebase-storage-manager/src/public-api.ts","../../../projects/angular-firebase-storage-manager/src/angular-firebase-storage-manager.ts"],"sourcesContent":["import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {\n  MAT_DIALOG_DATA, MatDialogModule, MatDialogRef,\n} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {FormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\n\n/**\n * Defines the data contract for information passed to the\n * NewFolderDialogComponent.\n */\nexport interface NewFolderDialogContract {\n  folderName: string,\n  path: string,\n}\n\n/**\n * Defines the data contract for information returned when\n * closing the NewFolderDialogComponent.\n */\nexport interface NewFolderDialogCloseContract {\n  folderName: string,\n}\n\n@Component({\n  selector: 'anon-new-folder-dialog',\n  templateUrl: './new-folder-dialog.component.html',\n  styleUrl: './new-folder-dialog.component.scss',\n  standalone: true,\n  imports: [\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatButtonModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NewFolderDialogComponent {\n  /**\n   * Constructor for the dialog component.\n   *\n   * @param {NewFolderDialogContract} data - Injected data containing initial\n   * folder information.\n   * @param {MatDialogRef} dialogRef - A reference to this dialog instance,\n   * used for controlling its behavior.\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA)\n    public data: NewFolderDialogContract,\n    private dialogRef: MatDialogRef<NewFolderDialogComponent>,\n  ) {}\n\n  /**\n   * Closes the dialog and passes back the entered folder name.\n   */\n  createFolder() {\n    const newFolderCloseContract: NewFolderDialogCloseContract = {\n      folderName: this.data.folderName,\n    };\n    this.dialogRef.close(newFolderCloseContract);\n  }\n}\n","<h1 mat-dialog-title>Create folder</h1>\n\n<mat-dialog-content>\n  <form class=\"new-folder\" (ngSubmit)=\"createFolder()\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>New folder name</mat-label>\n      <input matInput name=\"folderName\" [(ngModel)]=\"data.folderName\">\n    </mat-form-field>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button type=\"button\" mat-dialog-close>Cancel</button>\n  <button mat-raised-button\n          color=\"primary\"\n          type=\"submit\"\n          [disabled]=\"!data.folderName\"\n          (click)=\"createFolder()\">Create</button>\n</mat-dialog-actions>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatButtonModule} from '@angular/material/button';\n\n@Component({\n  selector: 'anon-delete-files-dialog',\n  templateUrl: './delete-files-dialog.component.html',\n  styleUrl: './delete-files-dialog.component.scss',\n  standalone: true,\n  imports: [MatDialogModule, MatButtonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeleteFilesDialogComponent {}\n","<h1 mat-dialog-title>\n  <span>Delete files</span>\n</h1>\n\n<mat-dialog-content>\n  You may be deleting user data. After you delete this, it can not be recovered.\n</mat-dialog-content>\n\n<div mat-dialog-actions align=\"end\">\n  <button mat-button type=\"button\" mat-dialog-close>Cancel</button>\n  \n  <button mat-raised-button color=\"warn\" type=\"button\"\n          [mat-dialog-close]=\"true\">Delete</button>\n</div>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {MatIconModule} from '@angular/material/icon';\n\n@Component({\n  selector: 'anon-storage-item-icon',\n  templateUrl: './storage-item-icon.component.html',\n  styleUrl: './storage-item-icon.component.scss',\n  standalone: true,\n  imports: [MatIconModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StorageItemIconComponent {\n  /**\n   * The type of item to represent.\n   * Can be either 'file' or 'folder'. Defaults to 'folder'.\n   */\n  @Input()\n    type: 'file' | 'folder' = 'folder';\n\n  /**\n   * The MIME content type of a file item (optional).\n   * Used for more specific icon selection.\n   */\n  @Input()\n    contentType?: string;\n\n  // This is copied as is from firebase-tools-ui\n\n  // https://github.com/firebase/firebase-tools-ui/blob/8ad31d748f687bbb04b838430c460121f9a8e338/src/components/Storage/common/StorageFileIcon/StorageFileIcon.tsx\n  /**\n   * A mapping of MIME content types to Material Design icon names.\n   * Used for determining specific icons for different file types.\n   * @private\n   */\n  private readonly MIME_TYPE_ICON_MAP: Record<string, string> = {\n    // pdf\n    'application/pdf': 'picture_as_pdf',\n    // images\n    'image/gif': 'image',\n    'image/jpg': 'image',\n    'image/jpeg': 'image',\n    'image/png': 'image',\n    'image/svg+xml': 'image',\n    'image/webp': 'image',\n    // audio\n    'audio/m4a': 'audio_file',\n    'audio/mp3': 'audio_file',\n    'audio/mpeg': 'audio_file',\n    'audio/wav': 'audio_file',\n    'audio/x-ms-wma': 'audio_file',\n    // video\n    'video/avi': 'video_file',\n    'video/mp4': 'video_file',\n    'video/mpeg': 'video_file',\n    'video/quicktime': 'video_file',\n    'video/x-ms-wmv': 'video_file',\n    'video/x-matroska': 'video_file',\n    'video/webp': 'video_file',\n    // zip\n    'application/zip': 'folder_zip',\n    // text documents\n    'text/javascript': 'javascript',\n    'text/plain': 'text_snippet',\n  } as const;\n  /**\n   * A default Material Design icon name used when a specific\n   * content type match is not found.\n   * @private\n   */\n  private readonly DEFAULT_MIME_TYPE_ICON = 'file_present';\n\n  /**\n   * Determines the appropriate Material Design icon name based on\n   * the provided content type or a default.\n   *\n   * @param {string} contentType - The MIME content type of the file (optional).\n   * @return {string} The name of the Material Design icon to use.\n   */\n  getFileIcon(contentType?: string): string {\n    if (!contentType) return this.DEFAULT_MIME_TYPE_ICON;\n\n    return this.MIME_TYPE_ICON_MAP[contentType] || this.DEFAULT_MIME_TYPE_ICON;\n  }\n}\n","@if (type === 'folder') {\n  <mat-icon class=\"material-icons-round\" fontIcon=\"folder\" />\n} @else {\n   \n  <mat-icon class=\"material-icons-round\" [fontIcon]=\"getFileIcon(contentType)\" />\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'formatBytes',\n  standalone: true,\n})\nexport class FormatBytesPipe implements PipeTransform {\n  // This has been copied and slightly modified from firebase-tools-ui\n\n  // https://github.com/firebase/firebase-tools-ui/blob/8ad31d748f687bbb04b838430c460121f9a8e338/src/components/common/formatBytes.ts\n  /**\n   * Formats a number by adding commas as thousands separators and\n   * limiting to two decimal places.\n   *\n   * @param {number} num - The number to format.\n   * @return {string} The formatted number as a string.\n   */\n  formatNumber(num: number): string {\n    const parts = num.toFixed(2).split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    if (+parts[1] === 0) {\n      return parts[0];\n    }\n    return parts.join('.');\n  }\n\n  /**\n   * Converts a number of bytes into a human-readable format with units\n   * (e.g., kB, MB, GB).\n   *\n   * @param {number} bytes - The number of bytes.\n   * @return {string} The formatted byte size representation.\n   */\n  formatBytes(bytes: number): string {\n    const threshold = 1024;\n    if (Math.round(bytes) < threshold) {\n      return bytes + ' B';\n    }\n    const units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let u = -1;\n    let formattedBytes = bytes;\n    do {\n      formattedBytes /= threshold;\n      u++;\n    } while (Math.abs(formattedBytes) >= threshold && u < units.length - 1);\n    return this.formatNumber(formattedBytes) + ' ' + units[u];\n  }\n\n  /**\n   * Transforms a value representing bytes into a human-readable formatted\n   * string. Accepts both numbers and strings as input.\n   *\n   * @param {string | number} bytes - The byte value to transform.\n   * @return {string} The formatted string representing the byte size.\n   */\n  transform(bytes: string | number): string {\n    if (typeof bytes === 'string') bytes = Number(bytes);\n\n    return this.formatBytes(bytes);\n  }\n}\n","import {Injectable, isDevMode} from '@angular/core';\nimport {\n  MatSnackBar, MatSnackBarConfig, MatSnackBarRef, TextOnlySnackBar,\n} from '@angular/material/snack-bar';\n\n@Injectable({providedIn: 'root'})\nexport class ConsoleLoggerService {\n  /**\n   * Checks if the application is currently running in development mode.\n   *\n   * @return {boolean} True if in development mode, false otherwise.\n   */\n  isInDevelopmentMode = (): boolean => isDevMode();\n\n  constructor(private snackBar: MatSnackBar) {}\n\n  /**\n   * Logs a debug message to the console if in development mode.\n   *\n   * @param {string} value - The primary message to log.\n   * @param {...unknown[]} restOfError - Additional values or error objects\n   * to log.\n   */\n  debug(value: string, ...restOfError: unknown[]): void {\n    if (!this.isInDevelopmentMode()) return;\n    console.debug(`${value}: `, restOfError);\n  }\n\n  /**\n   * Logs an informational message to the console and displays a snackbar\n   * notification if in development mode.\n   *\n   * @param {string} value - The primary message to log and display.\n   * @param {...unknown[]} restOfError - Additional values or error objects\n   * to log.\n   */\n  info(value: string, ...restOfError: unknown[]): void {\n    if (this.isInDevelopmentMode()) {\n      console.info(`${value}: `, restOfError);\n    }\n    this.openSnackBar(value, 'OK', {duration: 5000, panelClass: 'info'});\n  }\n\n  /**\n   * Logs a general message to the console and displays a snackbar notification\n   * if in development mode.\n   *\n   * @param {string} value - The primary message to log and display.\n   * @param {...unknown[]} restOfError - Additional values or error objects\n   * to log.\n   */\n  log(value: string, ...restOfError: unknown[]): void {\n    if (this.isInDevelopmentMode()) {\n      console.log(`${value}: `, restOfError);\n    }\n    this.openSnackBar(value, 'OK', {duration: 5000, panelClass: 'log'});\n  }\n\n  /**\n   * Logs a warning message to the console and displays a snackbar notification\n   * if in development mode.\n   *\n   * @param {string} value - The primary message to log and display.\n   * @param {...unknown[]} restOfError - Additional values or error objects\n   * to log.\n   */\n  warn(value: string, ...restOfError: unknown[]): void {\n    if (this.isInDevelopmentMode()) {\n      console.warn(`${value}: `, restOfError);\n    }\n    this.openSnackBar(value, 'OK', {duration: 10000, panelClass: 'warn'});\n  }\n\n  /**\n   * Logs an error message to the console and displays a snackbar notification\n   * if in development mode.\n   *\n   * @param {string} value - The primary message to log and display.\n   * @param {...unknown[]} restOfError - Additional values or error objects\n   * to log.\n   */\n  error(value: string, ...restOfError: unknown[]): void {\n    if (this.isInDevelopmentMode()) {\n      console.error(`${value}: `, restOfError);\n    }\n    this.openSnackBar(value, 'OK', {duration: 0, panelClass: 'error'});\n  }\n\n  /**\n   * Opens a Material Design snackbar notification.\n   *\n   * @param {string} message - The text message to display.\n   * @param {string | undefined} action - Optional label for the snackbar\n   * action button.\n   * @param {MatSnackBarConfig | undefined} config - Configuration options for\n   * the snackbar.\n   * @return {MatSnackBarRef<TextOnlySnackBar>} A reference to the snackbar.\n   */\n  openSnackBar(\n      message: string,\n      action: string | undefined,\n      config: MatSnackBarConfig | undefined,\n  ): MatSnackBarRef<TextOnlySnackBar> {\n    return this.snackBar.open(message, action, config);\n  }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {\n  Storage, StorageReference,\n  ListResult, listAll, ref,\n  uploadBytes, UploadResult,\n  FullMetadata, getDownloadURL,\n  getMetadata, deleteObject,\n} from '@angular/fire/storage';\nimport {StorageFile, StorageFolder, StorageItem} from '../interfaces';\nimport {DOCUMENT} from '@angular/common';\n\n@Injectable({providedIn: 'root'})\nexport class FirebaseStorageService {\n  constructor(\n    private storage: Storage,\n    @Inject(DOCUMENT) private document: Document,\n  ) {}\n\n  /**\n   * Retrieves a StorageReference object for interacting with\n   * Firebase Storage at the given path.\n   *\n   * @param {string} path - The desired path within Firebase Storage.\n   * @return {StorageReference} A reference to the specified location.\n   */\n  getRef(path: string): StorageReference {\n    return ref(this.storage, path);\n  }\n\n  /**\n   * Lists all files and prefixes (subfolders) within a Firebase Storage\n   * directory.\n   *\n   * @param {StorageReference} listRef - A reference to the directory to list.\n   * @return {Promise<ListResult>} Resolves with the listing results.\n   */\n  async listAll(listRef: StorageReference): Promise<ListResult> {\n    return await listAll(listRef);\n  }\n\n  /**\n   * Uploads a file to Firebase Storage with metadata for correct download\n   * behavior.\n   *\n   * @param {StorageReference} ref - Reference to the target upload location.\n   * @param {File} file - The file object to upload.\n   * @return {Promise<UploadResult>} Resolves with the upload results.\n   */\n  async uploadFile(ref: StorageReference, file: File): Promise<UploadResult> {\n    /*\n    * set content disposition to show filename instead of path on downloads\n    * file name cannot contain a \",\"(comma), it will be included in the\n    * content disposition */\n    const metadata = {\n      contentDisposition: `attachment; filename=${file.name}`,\n    };\n    return await uploadBytes(ref, file, metadata);\n  }\n\n  /**\n   * Uploads multiple files in parallel, optionally placing them within a\n   * folder.\n   *\n   * @param {File[]} files - An array of file objects to upload.\n   * @param {string} [folder] - Optional folder name for the uploaded files.\n   * @return {Promise<UploadResult[]>} Resolves with an array of upload results.\n   */\n  async uploadFiles(files: File[], folder?: string): Promise<UploadResult[]> {\n    return Promise.all(files.map(async (file) => {\n      const path = folder ? `${folder}/${file.name}` : file.name;\n      const fileRef = this.getRef(path);\n      return await this.uploadFile(fileRef, file);\n    }));\n  }\n\n  /**\n   * Fetches full metadata for a file in Firebase Storage and\n   * constructs a StorageFile object.\n   *\n   * @param {StorageReference} fileRef - A reference to the file.\n   * @return {Promise<StorageFile>} Resolves with the StorageFile\n   * representation.\n   */\n  async importFile(fileRef: StorageReference): Promise<StorageFile> {\n    const metadata: FullMetadata = await getMetadata(fileRef);\n    return {type: 'file', ...metadata};\n  }\n\n  /**\n   * Creates a StorageFolder object representing a Firebase Storage folder.\n   *\n   * @param {StorageReference} folder - A reference to the folder.\n   * @return {StorageFolder}\n   */\n  importFolder(folder: StorageReference): StorageFolder {\n    return {\n      type: 'folder',\n      name: folder.name,\n      fullPath: folder.fullPath,\n    };\n  }\n\n  /**\n   * Retrieves a direct download URL for a file in Firebase Storage.\n   *\n   * @param {StorageReference} ref - A reference to the file.\n   * @return {Promise<string>} Resolves with the download URL string.\n   */\n  async getDownloadURL(ref: StorageReference): Promise<string> {\n    return getDownloadURL(ref);\n  }\n\n  /**\n   * Opens all provided files in new browser tabs by generating download URLs\n   * and triggering download links.\n   *\n   * @param {StorageItem[]} files - An array of StorageItem objects\n   * representing files.\n   */\n  async openAllFiles(files: StorageItem[]) {\n    const paths = files.map((file) => file.fullPath);\n    const links = await Promise.all(paths.map((path) => this.getRef(path))\n        .map((ref) => this.getDownloadURL(ref)));\n    links.forEach((url) => {\n      const anchor = this.createAnchorElement(url);\n      anchor.click();\n    });\n  }\n\n  /**\n   * Recursively deletes a folder and its contents from Firebase Storage.\n   * Handles potential errors if the physical folder doesn't exist.\n   *\n   * @param {string} path - The full path of the folder to delete.\n   */\n  async deleteFolder(path: string): Promise<void> {\n    const {items, prefixes} = await this.listAll(this.getRef(path));\n\n    try {\n      /**\n       * We don't know if physical folder exists, or it is inferred from\n       * nested file path.\n       *\n       * So here we attempt to delete physical representation, but if it does\n       * not exist, we just swallow the error.\n       */\n      await this.deleteFile(path + `%2f`);\n    } catch {\n      // quietly swallow any errors.\n    }\n\n    const prefixesPromise: Promise<void>[] = prefixes.map(async (prefix) => {\n      return await this.deleteFolder(prefix.fullPath);\n    });\n\n    const filesPromise: Promise<void>[] = items.map(async (file) => {\n      return await this.deleteFile(file.fullPath);\n    });\n\n    await Promise.all([...filesPromise, ...prefixesPromise]);\n  }\n\n  /**\n   * Deletes a file from Firebase Storage.\n   *\n   * @param {string} path - The full path to the file.\n   */\n  async deleteFile(path: string): Promise<void> {\n    return deleteObject(this.getRef(path));\n  }\n\n  /**\n   * Deletes multiple files or folders from Firebase Storage.\n   *\n   * @param {StorageItem[]} items - An array of StorageItem objects.\n   */\n  async deleteFiles(items: StorageItem[]) {\n    return await Promise.all(\n        items.map(async (item) => {\n          if (item?.type === 'folder') {\n            return await this.deleteFolder(item.fullPath);\n          } else if (item?.type === 'file') {\n            return await this.deleteFile(item.fullPath);\n          }\n        }),\n    );\n  }\n\n  /**\n   * Helper function to create a download link element.\n   *\n   * @param {string} url - The download URL for the file.\n   * @return {HTMLAnchorElement} A configured anchor element for triggering\n   * a download.\n   */\n  createAnchorElement(url: string): HTMLAnchorElement {\n    const a: HTMLAnchorElement = this.document.createElement('a');\n    a.href = url;\n    a.target = '_blank';\n    a.rel = 'noopener';\n    return a;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component, EventEmitter, Input, OnChanges, Output,\n} from '@angular/core';\nimport {StorageFile} from '../../interfaces';\nimport {\n  FirebaseStorageService,\n} from '../../services/firebase-storage.service';\nimport {FirebaseError} from '@angular/fire/app/firebase';\nimport {\n  StorageItemIconComponent,\n} from '../storage-item-icon/storage-item-icon.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormatBytesPipe} from '../../pipes/format-bytes.pipe';\nimport {DatePipe, NgOptimizedImage} from '@angular/common';\nimport {ConsoleLoggerService} from '../../services/console-logger.service';\nimport {Clipboard} from '@angular/cdk/clipboard';\n\n@Component({\n  selector: 'anon-storage-file-preview',\n  templateUrl: './storage-file-preview.component.html',\n  styleUrl: './storage-file-preview.component.scss',\n  standalone: true,\n  imports: [\n    StorageItemIconComponent,\n    MatTooltipModule,\n    MatButtonModule,\n    MatIconModule,\n    FormatBytesPipe,\n    DatePipe,\n    NgOptimizedImage,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StorageFilePreviewComponent implements OnChanges {\n  /**\n   * The StorageFile object representing the file to preview.\n   */\n  @Input()\n    item?: StorageFile;\n\n  /**\n   * Emits an event when the preview should be closed.\n   * @event\n   */\n  @Output()\n  readonly _close: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n  /**\n   * The download URL for the previewed file (if successfully generated).\n   */\n  downloadURL?: string;\n\n  /**\n   * Indicates whether an error occurred while generating the file preview URL.\n   */\n  previewError = false;\n\n  constructor(\n    private clipboard: Clipboard,\n    private cLog: ConsoleLoggerService,\n    private storageService: FirebaseStorageService,\n  ) {}\n\n  ngOnChanges() {\n    if (!this.item) return;\n\n    /**\n     * Fetches the download URL for the new file and updates the preview state.\n     */\n    const fileRef = this.storageService.getRef(this.item.fullPath);\n    this.storageService.getDownloadURL(fileRef)\n        .then((downloadURL) => {\n          this.previewError = false;\n          this.downloadURL = downloadURL;\n        }).catch((error: FirebaseError) => {\n          this.cLog.error(\n              `Error getting download URL for '${this.item?.name}'`,\n              error,\n              this.item,\n          );\n        });\n  }\n\n  /**\n   * Emits the '_close' event to signal that the preview should be closed.\n   */\n  closePreview() {\n    this._close.emit(undefined);\n  }\n\n  onCopy() {\n    if (this.downloadURL) {\n      const success = this.clipboard.copy(this.downloadURL);\n      if (success) this.cLog.info('Copied to clipboard');\n      else this.cLog.info('Error copying to clipboard');\n    }\n  }\n}\n","@if (item) {\n  <div class=\"header\">\n    <div class=\"name\">\n      <anon-storage-item-icon [type]=\"item.type!\" [contentType]=\"item.contentType!\" />\n      <span matTooltipShowDelay=\"500\" [matTooltip]=\"item.name\">{{item.name}}</span>\n    </div>\n\n    <button mat-icon-button type=\"button\" (click)=\"closePreview()\">\n      <mat-icon fontIcon=\"close\" />\n    </button>\n  </div>\n\n  @if (downloadURL) {\n     \n    @if (item.contentType?.startsWith('image/')) {\n      <picture class=\"file-preview\">\n        <img fill [ngSrc]=\"downloadURL\" [alt]=\"item.fullPath\"\n             (error)=\"downloadURL=undefined;previewError=true\" />\n      </picture>\n       \n    } @else if (item.contentType?.startsWith('video/')) {\n      <video class=\"file-preview\" controls autoplay loop>\n        <source [type]=\"item.contentType\" [src]=\"downloadURL\"\n                (error)=\"downloadURL=undefined;previewError=true\"/>\n      </video>\n    }\n\n    <div class=\"btn-container\">\n      <div class=\"download-btn\">\n        <a mat-stroked-button type=\"button\" color=\"primary\" target=\"_blank\" [href]=\"downloadURL\">\n          <mat-icon fontIcon=\"download\" />\n          <span>Download</span>\n        </a>\n      </div>\n\n      <div class=\"copy-btn\">\n        <button mat-stroked-button type=\"button\" color=\"primary\" (click)=\"onCopy()\">\n          <mat-icon fontIcon=\"file_copy\" />\n          <span>Copy</span>\n        </button>\n      </div>\n    </div>\n  }\n  @if (previewError) {\n    <h3 class=\"file-preview\">Preview Not Available.</h3>\n  }\n\n  <dl class=\"metadata\">\n    <dt>Name</dt>\n    <dd><a class=\"download-link\" target=\"_blank\" [href]=\"downloadURL\">{{item.name}}</a></dd>\n\n    <dt>Size</dt>\n    <dd>{{item.size | formatBytes}}</dd>\n\n    <dt>Type</dt>\n    <dd>{{item.contentType}}</dd>\n\n    <dt>Created</dt>\n    <dd>{{item.timeCreated | date:'short'}}</dd>\n\n    <dt>Last modified</dt>\n    <dd>{{item.updated | date:'short'}}</dd>\n  </dl>\n}\n","import {\n  Directive, HostListener, Input, Output,\n  ElementRef, EventEmitter,\n} from '@angular/core';\n\n@Directive({\n  selector: '[anonFileDropzone]',\n  standalone: true,\n})\nexport class FileDropzoneDirective {\n  /**\n   * Emits a FileList when files are dropped onto the host element.\n   *\n   * @event\n   */\n  @Output() readonly dropped = new EventEmitter<FileList>();\n  /**\n   * Emits a boolean indicating whether the host element is currently being\n   * hovered over during a drag operation.\n   *\n   * @event\n   */\n  @Output() readonly hovered = new EventEmitter<boolean>();\n  /**\n   * The CSS class to apply to the host element when it's being hovered over.\n   * Defaults to 'hovered'.\n   */\n  @Input() hoverClass = 'hovered';\n\n  constructor(private elementRef: ElementRef) {}\n\n  /**\n   * Handles the 'drop' event, emitting the dropped files and preventing\n   * default behavior.\n   *\n   * @param {$event} $event - The DragEvent containing the dropped files.\n   */\n  @HostListener('drop', ['$event'])\n  onDrop($event: DragEvent) {\n    $event.preventDefault();\n    this.dropped.emit($event.dataTransfer?.files);\n    this.onDragLeave($event);\n  }\n\n  /**\n   * Handles the 'dragover' event, adding a hover class and emitting a\n   * 'hovered' event with a value of 'true'. Prevents default behavior.\n   *\n   * @param {$event} $event - The DragEvent.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver($event: DragEvent) {\n    $event.preventDefault();\n    this.elementRef.nativeElement.classList.add(this.hoverClass);\n    this.hovered.emit(true);\n  }\n\n  /**\n   * Handles the 'dragleave' event, removing the hover class and emitting\n   * a 'hovered' event with a value of 'false'. Prevents default behavior.\n   *\n   * @param {$event} $event - The DragEvent.\n   */\n  @HostListener('dragleave', ['$event'])\n  onDragLeave($event: DragEvent) {\n    $event.preventDefault();\n    this.elementRef.nativeElement.classList.remove(this.hoverClass);\n    this.hovered.emit(false);\n  }\n}\n","import {ChangeDetectionStrategy, Component, input, OnInit} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n@Component({\n  selector: 'anon-loading',\n  templateUrl: './loading.component.html',\n  styles: `\n      .loading {display: flex; align-items: center; justify-content: center; }\n  `,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoadingComponent implements OnInit {\n  /**\n   * Configures the height of the loading SVG (in pixels). Defaults to 250px.\n   */\n  height = input(250);\n\n  /**\n   * A dynamic SVG string representing the loading animation.\n   * This string is generated using the provided height.\n   * @private\n   */\n\n  LOADING_SVG = (height: number) => `<?xml version=\"1.0\" encoding=\"utf-8\"?><svg width='${height}px' height='${height}px' xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" class=\"uil-ring\"><rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"none\" class=\"bk\"></rect><defs><filter id=\"uil-ring-shadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\"><feOffset result=\"offOut\" in=\"SourceGraphic\" dx=\"0\" dy=\"0\"></feOffset><feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"0\"></feGaussianBlur><feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\"></feBlend></filter></defs><path d=\"M10,50c0,0,0,0.5,0.1,1.4c0,0.5,0.1,1,0.2,1.7c0,0.3,0.1,0.7,0.1,1.1c0.1,0.4,0.1,0.8,0.2,1.2c0.2,0.8,0.3,1.8,0.5,2.8 c0.3,1,0.6,2.1,0.9,3.2c0.3,1.1,0.9,2.3,1.4,3.5c0.5,1.2,1.2,2.4,1.8,3.7c0.3,0.6,0.8,1.2,1.2,1.9c0.4,0.6,0.8,1.3,1.3,1.9 c1,1.2,1.9,2.6,3.1,3.7c2.2,2.5,5,4.7,7.9,6.7c3,2,6.5,3.4,10.1,4.6c3.6,1.1,7.5,1.5,11.2,1.6c4-0.1,7.7-0.6,11.3-1.6 c3.6-1.2,7-2.6,10-4.6c3-2,5.8-4.2,7.9-6.7c1.2-1.2,2.1-2.5,3.1-3.7c0.5-0.6,0.9-1.3,1.3-1.9c0.4-0.6,0.8-1.3,1.2-1.9 c0.6-1.3,1.3-2.5,1.8-3.7c0.5-1.2,1-2.4,1.4-3.5c0.3-1.1,0.6-2.2,0.9-3.2c0.2-1,0.4-1.9,0.5-2.8c0.1-0.4,0.1-0.8,0.2-1.2 c0-0.4,0.1-0.7,0.1-1.1c0.1-0.7,0.1-1.2,0.2-1.7C90,50.5,90,50,90,50s0,0.5,0,1.4c0,0.5,0,1,0,1.7c0,0.3,0,0.7,0,1.1 c0,0.4-0.1,0.8-0.1,1.2c-0.1,0.9-0.2,1.8-0.4,2.8c-0.2,1-0.5,2.1-0.7,3.3c-0.3,1.2-0.8,2.4-1.2,3.7c-0.2,0.7-0.5,1.3-0.8,1.9 c-0.3,0.7-0.6,1.3-0.9,2c-0.3,0.7-0.7,1.3-1.1,2c-0.4,0.7-0.7,1.4-1.2,2c-1,1.3-1.9,2.7-3.1,4c-2.2,2.7-5,5-8.1,7.1 c-0.8,0.5-1.6,1-2.4,1.5c-0.8,0.5-1.7,0.9-2.6,1.3L66,87.7l-1.4,0.5c-0.9,0.3-1.8,0.7-2.8,1c-3.8,1.1-7.9,1.7-11.8,1.8L47,90.8 c-1,0-2-0.2-3-0.3l-1.5-0.2l-0.7-0.1L41.1,90c-1-0.3-1.9-0.5-2.9-0.7c-0.9-0.3-1.9-0.7-2.8-1L34,87.7l-1.3-0.6 c-0.9-0.4-1.8-0.8-2.6-1.3c-0.8-0.5-1.6-1-2.4-1.5c-3.1-2.1-5.9-4.5-8.1-7.1c-1.2-1.2-2.1-2.7-3.1-4c-0.5-0.6-0.8-1.4-1.2-2 c-0.4-0.7-0.8-1.3-1.1-2c-0.3-0.7-0.6-1.3-0.9-2c-0.3-0.7-0.6-1.3-0.8-1.9c-0.4-1.3-0.9-2.5-1.2-3.7c-0.3-1.2-0.5-2.3-0.7-3.3 c-0.2-1-0.3-2-0.4-2.8c-0.1-0.4-0.1-0.8-0.1-1.2c0-0.4,0-0.7,0-1.1c0-0.7,0-1.2,0-1.7C10,50.5,10,50,10,50z\" fill=\"#337ab7\" filter=\"url(#uil-ring-shadow)\"><animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 50 50\" to=\"360 50 50\" repeatCount=\"indefinite\" dur=\"1s\"></animateTransform></path></svg>`;\n\n  /**\n   * Holds a sanitized version of the dynamic SVG, ready for rendering.\n   */\n  svg?: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit() {\n    /**\n     * Generating a SafeHtml version of the loading SVG using the provided\n     * height.\n     */\n    if (this.height()) {\n      this.svg = this.sanitizer\n          .bypassSecurityTrustHtml(this.LOADING_SVG(this.height()));\n    }\n  }\n}\n","<div class=\"loading\">\n    <!-- eslint-disable-next-line @angular-eslint/template/no-inline-styles -->\n    <div [style.height]=\"height()+'px'\" [innerHTML]=\"svg\"></div>\n</div>\n","import {ChangeDetectionStrategy, Component, input} from '@angular/core';\nimport {LoadingComponent} from '../loading/loading.component';\n\n@Component({\n  selector: 'anon-loading-or-error',\n  templateUrl: './loading-or-error.component.html',\n  styleUrl: './loading-or-error.component.scss',\n  standalone: true,\n  imports: [LoadingComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoadingOrErrorComponent {\n  /**\n   * An optional Error object to display. If provided, the component will render\n   * an error display instead of a loading indicator.\n   */\n  error = input<Error>();\n}\n","@if (error(); as error) {\n  <div class=\"error\">\n    <h2>Error!</h2>\n    \n    <p>\n      @if (error.message) {\n        {{error.message}}\n      } @else {\n        Something weird happened. Keep calm and try again later.\n      }\n    </p>\n  </div>\n} @else {\n  <anon-loading [height]=\"250\" />\n}\n","import {\n  ChangeDetectionStrategy, Component, effect, Input, OnInit, output,\n} from '@angular/core';\nimport {FirebaseStorageService} from './services/firebase-storage.service';\nimport {StorageReference, UploadResult} from '@angular/fire/storage';\nimport {FirebaseError} from '@angular/fire/app/firebase';\nimport {MatDialog} from '@angular/material/dialog';\nimport {\n  NewFolderDialogCloseContract,\n  NewFolderDialogComponent, NewFolderDialogContract,\n} from './components/new-folder-dialog/new-folder-dialog.component';\nimport {StorageItem, StorageFile} from './interfaces';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DeleteFilesDialogComponent,\n} from './components/delete-files-dialog/delete-files-dialog.component';\nimport {AsyncPipe, DatePipe, NgClass} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {\n  StorageItemIconComponent,\n} from './components/storage-item-icon/storage-item-icon.component';\nimport {FormatBytesPipe} from './pipes/format-bytes.pipe';\nimport {\n  StorageFilePreviewComponent,\n} from './components/storage-file-preview/storage-file-preview.component';\nimport {FileDropzoneDirective} from './directives/file-dropzone.directive';\nimport {\n  LoadingOrErrorComponent,\n} from './components/loading-or-error/loading-or-error.component';\nimport {ConsoleLoggerService} from './services/console-logger.service';\nimport {first} from 'rxjs';\nimport {toSignal} from '@angular/core/rxjs-interop';\n\n@Component({\n  selector: 'anon-file-manager',\n  templateUrl: './file-manager.component.html',\n  styleUrl: './file-manager.component.scss',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    MatButtonModule,\n    MatIconModule,\n    MatTableModule,\n    MatCheckboxModule,\n    StorageItemIconComponent,\n    FormatBytesPipe,\n    DatePipe,\n    StorageFilePreviewComponent,\n    FileDropzoneDirective,\n    LoadingOrErrorComponent,\n    NgClass,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FileManagerComponent implements OnInit {\n  /**\n   * The columns to display in the file management table.\n   */\n  tableColumns: string[] = ['checkbox', 'name', 'size', 'type', 'lastModified'];\n  /**\n   * A Promise resolving to an array of StorageItem objects representing\n   * the current directory contents, or undefined if an error occurs.\n   */\n  items$?: Promise<StorageItem[]> | undefined;\n  /**\n   * The current path within the storage system.\n   */\n  currentPath = '';\n  /**\n   * Represents a potential FirebaseError encountered during file operations.\n   */\n  error?: FirebaseError;\n\n  /**\n   * Used for managing multiple item selection within the file manager.\n   */\n  @Input()\n    selection = new SelectionModel<StorageItem>(true, []);\n\n  /**\n   * The currently selected file (if any).\n   */\n  @Input()\n    selectedFile: StorageFile | undefined;\n\n  /**\n   * The root path within the storage system where the file manager operates.\n   */\n  @Input()\n    rootStoragePath = '';\n\n  selectionChangeSignal = toSignal(this.selection.changed);\n  readonly selectionChange = output<StorageItem[] | null>();\n\n  constructor(\n    private dialog: MatDialog,\n    private cLog: ConsoleLoggerService,\n    private storageService: FirebaseStorageService,\n  ) {\n    effect(() => {\n      const selectionChange = this.selectionChangeSignal();\n      this.selectionChange.emit(selectionChange?.source.selected || null);\n    });\n  }\n\n  ngOnInit() {\n    /** Sets the initial path within the storage system */\n    this.currentPath = this.rootStoragePath;\n    /** Fetches the initial storage items */\n    this.items$ = this.getAllStorageItems(this.currentPath);\n  }\n\n  /**\n   * Downloads the provided files by triggering download links.\n   * @param {StorageItem[]} files - The files to download.\n   */\n  async downloadFiles(files: StorageItem[]) {\n    await this.storageService.openAllFiles(files);\n  }\n\n  /**\n   * Toggles the selection of all items in the file listing.\n   *\n   * @param {boolean} checked - Whether to select or deselect all items.\n   * @param {StorageItem[]} items - The list of file items.\n   */\n  toggleAllItems(checked: boolean, items: StorageItem[]) {\n    if (!checked) {\n      this.selection.clear();\n      return;\n    }\n    this.selection.select(...items);\n  }\n\n  /**\n   * Checks if all items in the file listing are currently selected.\n   *\n   * @param {StorageItem[]} items - The list of file items.\n   * @return {boolean} True if all items are selected, false otherwise.\n   */\n  allItemsSelected(items: StorageItem[]): boolean {\n    return this.selection.selected.length === items.length &&\n      this.selection.selected.length > 0;\n  }\n\n  /**\n   * Checks if some, but not all, items in the file listing are selected.\n   *\n   * @param {StorageItem[]} items - The list of file items.\n   * @return {boolean} True if the selection state is indeterminate, false\n   * otherwise.\n   */\n  allItemsIndeterminate(items: StorageItem[]): boolean {\n    return this.selection.selected.length > 0 &&\n      this.selection.selected.length < items.length;\n  }\n\n  /**\n   * Event handler for when a storage item is selected. Updates the navigation\n   * if a folder is selected, or sets the selected file if a file is selected.\n   *\n   * @param {StorageItem} item - The selected StorageItem.\n   */\n  storageItemSelected(item: StorageItem) {\n    if (item.type === 'folder') this.setStoragePath(item.fullPath);\n    else if (item.type === 'file') this.selectedFile = item;\n  }\n\n  /**\n   * Checks if the current selection includes at least one folder.\n   *\n   * @return {boolean} True if a folder is part of the selection, false\n   * otherwise.\n   */\n  get selectionIncludesFolder(): boolean {\n    return this.selection.selected.some((item) => item.type === 'folder');\n  }\n\n  /**\n   * Opens a dialog to confirm deletion, and handles deleting selected items\n   * if confirmed. Clears the selection and updates the file listing.\n   *\n   * @param {StorageItem[]} items - The items to delete.\n   */\n  deleteItems(items: StorageItem[]) {\n    const dialogRef = this.dialog.open(DeleteFilesDialogComponent, {\n      id: 'delete-files-dialog',\n      minWidth: '250px',\n    });\n    dialogRef.afterClosed().pipe(first()).forEach((confirm: boolean) => {\n      if (confirm) {\n        this.storageService.deleteFiles(items)\n            .then(() => {\n              this.selection.clear();\n              if (items.some((item) => item == this.selectedFile)) {\n                this.selectedFile = undefined;\n              }\n            })\n            .then(() => this.reload(this.currentPath));\n      }\n    });\n  }\n\n  /**\n   * Constructs a breadcrumb-style path string based on the current path\n   * history. Used for navigation display.\n   *\n   * @param {string[]} pathArray - An array of path segments.\n   * @param {number} index - The index up to which path segments should be\n   * included.\n   * @return {string} The constructed path string.\n   */\n  getCrumbPath(pathArray: string[], index: number): string {\n    pathArray.length = index + 1;\n    return pathArray.join('/');\n  }\n\n  /**\n   * Updates the current path and fetches the new file listing.\n   * Clears any existing selection.\n   *\n   * @param {string} path - The new storage path.\n   */\n  setStoragePath(path: string) {\n    this.items$ = this.getAllStorageItems(path);\n    this.currentPath = path;\n    if (this.selection.hasValue()) this.selection.clear();\n  }\n\n  /**\n   * Retrieves and processes all items within a given storage path.\n   *\n   * @param {string} path - The storage path to list.\n   * @return {Promise<StorageItem[]>} A Promise resolving to the items,\n   * or undefined in case of error.\n   */\n  async getAllStorageItems(path: string): Promise<StorageItem[]> {\n    const storageRef: StorageReference = this.storageService.getRef(path);\n    return this.storageService.listAll(storageRef)\n        .then(async ({items, prefixes}) => {\n          const allItems: StorageItem[] = [\n            ...prefixes.map(this.storageService.importFolder),\n            ...(await Promise.all(items.map(this.storageService.importFile))),\n          ];\n          return allItems;\n        })\n        .catch((error: FirebaseError) => {\n          this.error = error;\n          return new Promise(() => undefined);\n        });\n  }\n\n  /**\n   * Reloads the file and folder listing within the current or specified path.\n   *\n   * @param {string | null} path - Optional. The path to reload. If null,\n   * the current path is used.\n   */\n  reload(path: string | null = null) {\n    let pathRef: StorageReference;\n    if (path) pathRef = this.storageService.getRef(path);\n    else pathRef = this.storageService.getRef(this.currentPath);\n\n    this.items$ = this.storageService.listAll(pathRef)\n        .then(async ({items, prefixes}) => [\n          ...prefixes.map(this.storageService.importFolder),\n          ...(await Promise.all(items.map(this.storageService.importFile))),\n        ]);\n  }\n\n  /**\n   * Opens a dialog to create a new folder and updates folder listing\n   * if successful.\n   */\n  createNewFolder() {\n    const newFolderContract: NewFolderDialogContract = {\n      folderName: '',\n      path: this.currentPath,\n    };\n    const dialogRef = this.dialog.open(NewFolderDialogComponent, {\n      id: 'create-new-folder-dialog',\n      width: '250px',\n      data: newFolderContract,\n    });\n    dialogRef.afterClosed()\n        .pipe(first())\n        .forEach((contract: NewFolderDialogCloseContract) => {\n          if (contract.folderName) {\n            const path = this.currentPath ?\n            `${this.currentPath}/${contract.folderName}` : contract.folderName;\n            this.setStoragePath(path);\n          }\n        });\n  }\n\n  /**\n   * Handles file upload logic, including validation and updating the\n   * file listing upon successful upload. Logs errors if encountered.\n   *\n   * @param {FileList} files - An optional FileList of files to upload.\n   */\n  async uploadItems(files?: FileList): Promise<void> {\n    if (!files) return;\n\n    // prevent file names to have \",\"(comma)\n    if (Array.from(files).some((file) => file.name.includes(','))) {\n      this.cLog.warn(`File names cannot include a \",\"(comma)`);\n      return;\n    }\n\n    const uploadedFiles: UploadResult[] = [];\n\n    for (const file of Array.from(files)) {\n      const fileRef = this.storageService\n          .getRef(`${this.currentPath}/${file.name}`);\n\n      await this.storageService.uploadFile(fileRef, file)\n          .then((snapshot) => uploadedFiles.push(snapshot))\n          .catch((error: FirebaseError) => {\n            return this.handleUploadError(error, file.name);\n          });\n    }\n\n    if (!uploadedFiles.length) return;\n\n    this.reload(this.currentPath);\n    /* eslint-disable-next-line max-len */\n    this.cLog.info(`Uploaded ${uploadedFiles.length} ${uploadedFiles.length === 1 ? 'file' : 'files'}`, uploadedFiles);\n  }\n\n  /**\n   * Event handler for file input change. Triggers the upload process.\n   *\n   * @param {Event} $event - The file input change event.\n   */\n  async onFilesSelect($event: Event): Promise<void> {\n    const files: FileList =\n      ($event.target as HTMLInputElement).files as FileList;\n    await this.uploadItems(files);\n  }\n\n  /**\n   * Handles logging of errors during the file upload process.\n   *\n   * @param {FirebaseError} error - The Firebase error object.\n   * @param {string} filename - The name of the file that failed to upload.\n   */\n  handleUploadError(error: FirebaseError, filename: string) {\n    this.cLog.error(\n      error.code === 'storage/unauthorized' ?\n        'You do not have permission to upload' :\n        `Error uploading file: '${filename}'`,\n      error,\n    );\n  }\n}\n","@if (items$ | async; as items) {\n  <div class=\"card\">\n    <input #inputUpload multiple class=\"inputUpload\"\n           type=\"file\" autocomplete=\"off\" tabindex=\"-1\"\n           (change)=\"onFilesSelect($event)\" />\n     \n    @if (selection.isEmpty()) {\n      <header class=\"header\">\n        <!-- Crumbs -->\n        <span class=\"crumbs\">\n          <button mat-icon-button type=\"button\"\n                  [disabled]=\"currentPath===rootStoragePath\"\n                  (click)=\"setStoragePath(rootStoragePath)\">\n            <mat-icon fontIcon=\"home\" />\n          </button>\n           \n          @for (crumb of currentPath.split('/'); track crumb;let i=$index; let last=$last) {\n            @if (crumb !== rootStoragePath) {\n              @if (currentPath!==rootStoragePath) {\n                <mat-icon class=\"overflow-visible\" fontIcon=\"chevron_right\" />\n              }\n              <button mat-button type=\"button\" [disabled]=\"last\"\n                      (click)=\"setStoragePath(getCrumbPath(currentPath.split('/'), i))\">\n              {{crumb}}\n            </button>\n            }\n          }\n        </span>\n\n        <button mat-icon-button type=\"button\" (click)=\"reload()\">\n          <mat-icon fontIcon=\"refresh\" />\n        </button>\n        <button mat-icon-button type=\"button\" (click)=\"createNewFolder()\">\n          <mat-icon fontIcon=\"create_new_folder\" />\n        </button>\n        <div>\n          <button mat-flat-button type=\"button\" color=\"primary\"\n                  (click)=\"inputUpload.click()\">Upload</button>\n        </div>\n      </header>\n    } @else {\n      <header class=\"header items-selected\">\n        <button mat-icon-button type=\"button\" (click)=\"selection.clear()\">\n          <mat-icon fontIcon=\"close\" />\n        </button>\n        <span>{{selection.selected.length}} {{selection.selected.length === 1 ? 'item' : 'items'}}</span>\n         \n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"selectionIncludesFolder\"\n                (click)=\"downloadFiles(selection.selected)\">Download files</button>\n        <button mat-stroked-button type=\"button\"\n                (click)=\"deleteItems(selection.selected)\">Delete</button>\n      </header>\n    }\n\n    <div class=\"content\">\n      <div class=\"table-sidebar\">\n        <div class=\"table-wrapper\" [ngClass]=\"{'grid-column-end-span-8': selectedFile}\">\n          <table mat-table [dataSource]=\"items\">\n            <!-- Checkbox Column -->\n            <ng-container matColumnDef=\"checkbox\">\n              <th *matHeaderCellDef mat-header-cell class=\"checkbox-column\">\n                 \n                <mat-checkbox name=\"select-all\" [checked]=\"allItemsSelected(items)\" [indeterminate]=\"allItemsIndeterminate(items)\"\n                              [disabled]=\"items.length === 0\"\n                              (change)=\"toggleAllItems($event.checked, items)\" />\n              </th>\n              <td *matCellDef=\"let item\" mat-cell class=\"checkbox-column\">\n                 \n                <mat-checkbox [checked]=\"selection.isSelected(item)\"\n                              (click)=\"$event.stopPropagation()\"\n                              (change)=\"selection.toggle(item)\" />\n              </td>\n            </ng-container>\n\n            <!-- Name Column -->\n            <ng-container matColumnDef=\"name\">\n              <th *matHeaderCellDef mat-header-cell> Name </th>\n              <td *matCellDef=\"let item\" mat-cell class=\"name-column\">\n                <anon-storage-item-icon [type]=\"item.type\" [contentType]=\"item.contentType\" />\n                <span>{{item.name}}</span>\n              </td>\n            </ng-container>\n\n            <!-- Size Column -->\n            <ng-container matColumnDef=\"size\">\n              <th *matHeaderCellDef mat-header-cell> Size </th>\n              <td *matCellDef=\"let item\" mat-cell>\n                {{item.type === 'folder' ? '&mdash;' : item.size | formatBytes}}\n              </td>\n            </ng-container>\n\n            <!-- Type Column -->\n            <ng-container matColumnDef=\"type\">\n              <th *matHeaderCellDef mat-header-cell> Type </th>\n              <td *matCellDef=\"let item\" mat-cell>\n                {{item.type === 'folder' ? 'Folder' : item.contentType}}\n              </td>\n            </ng-container>\n\n            <!-- Last Modified Column -->\n            <ng-container matColumnDef=\"lastModified\">\n              <th *matHeaderCellDef mat-header-cell> Last Modified </th>\n              <td *matCellDef=\"let item\" mat-cell>\n                {{item.type === 'folder' ? '&mdash;' : item.updated | date}}\n              </td>\n            </ng-container>\n\n            <tr *matHeaderRowDef=\"tableColumns; sticky: true\" mat-header-row></tr>\n            <tr *matRowDef=\"let item; columns: tableColumns;\" mat-row\n                [class.selected]=\"selectedFile === item\"\n                (click)=\"storageItemSelected(item)\"></tr>\n\n            <tr *matNoDataRow class=\"mat-row\">\n              <td class=\"mat-cell\" [attr.colspan]=\"tableColumns.length\">\n                <div anonFileDropzone class=\"empty-folder\"\n                     hoverClass=\"hovering\" tabindex=\"0\"\n                     (click)=\"inputUpload.click()\"\n                     (keyup)=\"inputUpload.click()\"\n                     (dropped)=\"uploadItems($event)\">\n                  <div>No files found</div>\n                  <div>Drag and drop files to upload</div>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </div>\n\n        @if (selectedFile) {\n          <aside class=\"sidebar grid-column-end-span-4\">\n            <anon-storage-file-preview [item]=\"selectedFile\" (_close)=\"selectedFile = undefined\" />\n          </aside>\n        }\n      </div>\n    </div>\n  </div>\n} @else {\n  <anon-loading-or-error [error]=\"error\" />\n}\n","/*\n * Public API Surface of angular-firebase-storage-manager\n */\n\nexport * from './lib/file-manager.component';\nexport * from './lib/interfaces';\nexport * from './lib/services';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2","i1","i2.ConsoleLoggerService","i3.FirebaseStorageService","i4","i6","i5"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwCa,wBAAwB,CAAA;AACnC;;;;;;;AAOG;IACH,WAES,CAAA,IAA6B,EAC5B,SAAiD,EAAA;QADlD,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAyB;QAC5B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAwC;KACvD;AAEJ;;AAEG;IACH,YAAY,GAAA;AACV,QAAA,MAAM,sBAAsB,GAAiC;AAC3D,YAAA,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU;SACjC,CAAC;AACF,QAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;KAC9C;AAvBU,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,wBAAwB,kBAUzB,eAAe,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAVd,wBAAwB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,wBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECxCrC,0pBAmBA,EAAA,MAAA,EAAA,CAAA,0GAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDaI,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,sCAAA,EAAA,MAAA,EAAA,CAAA,YAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,gBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,sCAAA,EAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA,QAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,8DAAA,EAAA,MAAA,EAAA,CAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,8DAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACf,kBAAkB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAClB,cAAc,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,yHAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aAAA,EAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,kBAAA,EAAA,OAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACd,WAAW,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,8CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,0FAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,wDAAA,EAAA,MAAA,EAAA,CAAA,eAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACX,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAIN,wBAAwB,EAAA,UAAA,EAAA,CAAA;kBAdpC,SAAS;+BACE,wBAAwB,EAAA,UAAA,EAGtB,IAAI,EACP,OAAA,EAAA;wBACP,eAAe;wBACf,kBAAkB;wBAClB,cAAc;wBACd,WAAW;wBACX,eAAe;qBAChB,EACgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,0pBAAA,EAAA,MAAA,EAAA,CAAA,0GAAA,CAAA,EAAA,CAAA;;0BAY5C,MAAM;2BAAC,eAAe,CAAA;;;MEtCd,0BAA0B,CAAA;8GAA1B,0BAA0B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAA1B,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,0BAA0B,ECZvC,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,0BAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,8aAcA,EDLY,MAAA,EAAA,CAAA,uDAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAe,+nBAAE,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAG/B,0BAA0B,EAAA,UAAA,EAAA,CAAA;kBARtC,SAAS;+BACE,0BAA0B,EAAA,UAAA,EAGxB,IAAI,EAAA,OAAA,EACP,CAAC,eAAe,EAAE,eAAe,CAAC,EAAA,eAAA,EAC1B,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,8aAAA,EAAA,MAAA,EAAA,CAAA,uDAAA,CAAA,EAAA,CAAA;;;MECpC,wBAAwB,CAAA;AARrC,IAAA,WAAA,GAAA;AASE;;;AAGG;QAED,IAAI,CAAA,IAAA,GAAsB,QAAQ,CAAC;;;AAYrC;;;;AAIG;AACc,QAAA,IAAA,CAAA,kBAAkB,GAA2B;;AAE5D,YAAA,iBAAiB,EAAE,gBAAgB;;AAEnC,YAAA,WAAW,EAAE,OAAO;AACpB,YAAA,WAAW,EAAE,OAAO;AACpB,YAAA,YAAY,EAAE,OAAO;AACrB,YAAA,WAAW,EAAE,OAAO;AACpB,YAAA,eAAe,EAAE,OAAO;AACxB,YAAA,YAAY,EAAE,OAAO;;AAErB,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,YAAY,EAAE,YAAY;AAC1B,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,gBAAgB,EAAE,YAAY;;AAE9B,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,YAAY,EAAE,YAAY;AAC1B,YAAA,iBAAiB,EAAE,YAAY;AAC/B,YAAA,gBAAgB,EAAE,YAAY;AAC9B,YAAA,kBAAkB,EAAE,YAAY;AAChC,YAAA,YAAY,EAAE,YAAY;;AAE1B,YAAA,iBAAiB,EAAE,YAAY;;AAE/B,YAAA,iBAAiB,EAAE,YAAY;AAC/B,YAAA,YAAY,EAAE,cAAc;SACpB,CAAC;AACX;;;;AAIG;QACc,IAAsB,CAAA,sBAAA,GAAG,cAAc,CAAC;AAc1D,KAAA;AAZC;;;;;;AAMG;AACH,IAAA,WAAW,CAAC,WAAoB,EAAA;AAC9B,QAAA,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAC,sBAAsB,CAAC;QAErD,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC;KAC5E;8GAvEU,wBAAwB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAxB,wBAAwB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,wBAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECXrC,0MAMA,EAAA,MAAA,EAAA,CAAA,iDAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDEY,aAAa,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAGZ,wBAAwB,EAAA,UAAA,EAAA,CAAA;kBARpC,SAAS;+BACE,wBAAwB,EAAA,UAAA,EAGtB,IAAI,EACP,OAAA,EAAA,CAAC,aAAa,CAAC,EAAA,eAAA,EACP,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,0MAAA,EAAA,MAAA,EAAA,CAAA,iDAAA,CAAA,EAAA,CAAA;8BAQ7C,IAAI,EAAA,CAAA;sBADL,KAAK;gBAQJ,WAAW,EAAA,CAAA;sBADZ,KAAK;;;MEjBK,eAAe,CAAA;;;AAI1B;;;;;;AAMG;AACH,IAAA,YAAY,CAAC,GAAW,EAAA;AACtB,QAAA,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxC,QAAA,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;AACnB,YAAA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;SACjB;AACD,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACxB;AAED;;;;;;AAMG;AACH,IAAA,WAAW,CAAC,KAAa,EAAA;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,EAAE;YACjC,OAAO,KAAK,GAAG,IAAI,CAAC;SACrB;AACD,QAAA,MAAM,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACX,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,QAAA,GAAG;YACD,cAAc,IAAI,SAAS,CAAC;AAC5B,YAAA,CAAC,EAAE,CAAC;AACN,SAAC,QAAQ,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,SAAS,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACxE,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KAC3D;AAED;;;;;;AAMG;AACH,IAAA,SAAS,CAAC,KAAsB,EAAA;QAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ;AAAE,YAAA,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAErD,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAChC;8GArDU,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA;4GAAf,eAAe,EAAA,YAAA,EAAA,IAAA,EAAA,IAAA,EAAA,aAAA,EAAA,CAAA,CAAA,EAAA;;2FAAf,eAAe,EAAA,UAAA,EAAA,CAAA;kBAJ3B,IAAI;AAAC,YAAA,IAAA,EAAA,CAAA;AACJ,oBAAA,IAAI,EAAE,aAAa;AACnB,oBAAA,UAAU,EAAE,IAAI;AACjB,iBAAA,CAAA;;;MCCY,oBAAoB,CAAA;AAQ/B,IAAA,WAAA,CAAoB,QAAqB,EAAA;QAArB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAa;AAPzC;;;;AAIG;AACH,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAe,SAAS,EAAE,CAAC;KAEJ;AAE7C;;;;;;AAMG;AACH,IAAA,KAAK,CAAC,KAAa,EAAE,GAAG,WAAsB,EAAA;AAC5C,QAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAAE,OAAO;QACxC,OAAO,CAAC,KAAK,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,EAAE,WAAW,CAAC,CAAC;KAC1C;AAED;;;;;;;AAOG;AACH,IAAA,IAAI,CAAC,KAAa,EAAE,GAAG,WAAsB,EAAA;AAC3C,QAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO,CAAC,IAAI,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,EAAE,WAAW,CAAC,CAAC;SACzC;AACD,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC,CAAC;KACtE;AAED;;;;;;;AAOG;AACH,IAAA,GAAG,CAAC,KAAa,EAAE,GAAG,WAAsB,EAAA;AAC1C,QAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,EAAE,WAAW,CAAC,CAAC;SACxC;AACD,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAC,CAAC,CAAC;KACrE;AAED;;;;;;;AAOG;AACH,IAAA,IAAI,CAAC,KAAa,EAAE,GAAG,WAAsB,EAAA;AAC3C,QAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO,CAAC,IAAI,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,EAAE,WAAW,CAAC,CAAC;SACzC;AACD,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC,CAAC;KACvE;AAED;;;;;;;AAOG;AACH,IAAA,KAAK,CAAC,KAAa,EAAE,GAAG,WAAsB,EAAA;AAC5C,QAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC9B,OAAO,CAAC,KAAK,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,EAAE,WAAW,CAAC,CAAC;SAC1C;AACD,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,EAAC,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAC,CAAC,CAAC;KACpE;AAED;;;;;;;;;AASG;AACH,IAAA,YAAY,CACR,OAAe,EACf,MAA0B,EAC1B,MAAqC,EAAA;AAEvC,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KACpD;8GAlGU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,IAAA,CAAA,WAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;AAApB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oBAAoB,cADR,MAAM,EAAA,CAAA,CAAA,EAAA;;2FAClB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBADhC,UAAU;mBAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAA;;;MCOnB,sBAAsB,CAAA;IACjC,WACU,CAAA,OAAgB,EACE,QAAkB,EAAA;QADpC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QACE,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAC1C;AAEJ;;;;;;AAMG;AACH,IAAA,MAAM,CAAC,IAAY,EAAA;QACjB,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAChC;AAED;;;;;;AAMG;IACH,MAAM,OAAO,CAAC,OAAyB,EAAA;AACrC,QAAA,OAAO,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;KAC/B;AAED;;;;;;;AAOG;AACH,IAAA,MAAM,UAAU,CAAC,GAAqB,EAAE,IAAU,EAAA;AAChD;;;AAGwB;AACxB,QAAA,MAAM,QAAQ,GAAG;AACf,YAAA,kBAAkB,EAAE,CAAA,qBAAA,EAAwB,IAAI,CAAC,IAAI,CAAE,CAAA;SACxD,CAAC;QACF,OAAO,MAAM,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC/C;AAED;;;;;;;AAOG;AACH,IAAA,MAAM,WAAW,CAAC,KAAa,EAAE,MAAe,EAAA;AAC9C,QAAA,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,KAAI;AAC1C,YAAA,MAAM,IAAI,GAAG,MAAM,GAAG,GAAG,MAAM,CAAA,CAAA,EAAI,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAClC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SAC7C,CAAC,CAAC,CAAC;KACL;AAED;;;;;;;AAOG;IACH,MAAM,UAAU,CAAC,OAAyB,EAAA;AACxC,QAAA,MAAM,QAAQ,GAAiB,MAAM,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1D,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,GAAG,QAAQ,EAAC,CAAC;KACpC;AAED;;;;;AAKG;AACH,IAAA,YAAY,CAAC,MAAwB,EAAA;QACnC,OAAO;AACL,YAAA,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;KACH;AAED;;;;;AAKG;IACH,MAAM,cAAc,CAAC,GAAqB,EAAA;AACxC,QAAA,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;KAC5B;AAED;;;;;;AAMG;IACH,MAAM,YAAY,CAAC,KAAoB,EAAA;AACrC,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjE,aAAA,GAAG,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7C,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;YACpB,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,EAAE,CAAC;AACjB,SAAC,CAAC,CAAC;KACJ;AAED;;;;;AAKG;IACH,MAAM,YAAY,CAAC,IAAY,EAAA;AAC7B,QAAA,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAEhE,QAAA,IAAI;AACF;;;;;;AAMG;YACH,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAA,GAAA,CAAK,CAAC,CAAC;SACrC;AAAC,QAAA,MAAM;;SAEP;QAED,MAAM,eAAe,GAAoB,QAAQ,CAAC,GAAG,CAAC,OAAO,MAAM,KAAI;YACrE,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAClD,SAAC,CAAC,CAAC;QAEH,MAAM,YAAY,GAAoB,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,KAAI;YAC7D,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9C,SAAC,CAAC,CAAC;AAEH,QAAA,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,EAAE,GAAG,eAAe,CAAC,CAAC,CAAC;KAC1D;AAED;;;;AAIG;IACH,MAAM,UAAU,CAAC,IAAY,EAAA;QAC3B,OAAO,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;KACxC;AAED;;;;AAIG;IACH,MAAM,WAAW,CAAC,KAAoB,EAAA;AACpC,QAAA,OAAO,MAAM,OAAO,CAAC,GAAG,CACpB,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,KAAI;AACvB,YAAA,IAAI,IAAI,EAAE,IAAI,KAAK,QAAQ,EAAE;gBAC3B,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC/C;AAAM,iBAAA,IAAI,IAAI,EAAE,IAAI,KAAK,MAAM,EAAE;gBAChC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7C;SACF,CAAC,CACL,CAAC;KACH;AAED;;;;;;AAMG;AACH,IAAA,mBAAmB,CAAC,GAAW,EAAA;QAC7B,MAAM,CAAC,GAAsB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC9D,QAAA,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;AACb,QAAA,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpB,QAAA,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC;AACnB,QAAA,OAAO,CAAC,CAAC;KACV;AA7LU,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,sBAAsB,2CAGvB,QAAQ,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;AAHP,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,sBAAsB,cADV,MAAM,EAAA,CAAA,CAAA,EAAA;;2FAClB,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBADlC,UAAU;mBAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAA;;0BAI3B,MAAM;2BAAC,QAAQ,CAAA;;;MCqBP,2BAA2B,CAAA;AAwBtC,IAAA,WAAA,CACU,SAAoB,EACpB,IAA0B,EAC1B,cAAsC,EAAA;QAFtC,IAAS,CAAA,SAAA,GAAT,SAAS,CAAW;QACpB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAsB;QAC1B,IAAc,CAAA,cAAA,GAAd,cAAc,CAAwB;AApBhD;;;AAGG;AAEM,QAAA,IAAA,CAAA,MAAM,GAA4B,IAAI,YAAY,EAAa,CAAC;AAOzE;;AAEG;QACH,IAAY,CAAA,YAAA,GAAG,KAAK,CAAC;KAMjB;IAEJ,WAAW,GAAA;QACT,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,OAAO;AAEvB;;AAEG;AACH,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC;AACtC,aAAA,IAAI,CAAC,CAAC,WAAW,KAAI;AACpB,YAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACjC,SAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAoB,KAAI;AAChC,YAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CACX,CAAA,gCAAA,EAAmC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA,CAAG,EACrD,KAAK,EACL,IAAI,CAAC,IAAI,CACZ,CAAC;AACJ,SAAC,CAAC,CAAC;KACR;AAED;;AAEG;IACH,YAAY,GAAA;AACV,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC7B;IAED,MAAM,GAAA;AACJ,QAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACtD,YAAA,IAAI,OAAO;AAAE,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;;AAC9C,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;SACnD;KACF;8GA/DU,2BAA2B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,IAAA,CAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,sBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAA3B,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,2BAA2B,ECpCxC,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,2BAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,EAAA,aAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,y+DAgEA,EDtCI,MAAA,EAAA,CAAA,wrBAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,wBAAwB,mGACxB,gBAAgB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,UAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,4BAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,yBAAA,EAAA,YAAA,EAAA,iBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,YAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAChB,eAAe,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,gFAAA,EAAA,QAAA,EAAA,CAAA,WAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACf,aAAa,EACb,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,eAAe,EACf,IAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAQ,6CACR,gBAAgB,EAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,cAAA,EAAA,wBAAA,EAAA,MAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,KAAA,EAAA,QAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAIP,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAhBvC,SAAS;+BACE,2BAA2B,EAAA,UAAA,EAGzB,IAAI,EACP,OAAA,EAAA;wBACP,wBAAwB;wBACxB,gBAAgB;wBAChB,eAAe;wBACf,aAAa;wBACb,eAAe;wBACf,QAAQ;wBACR,gBAAgB;qBACjB,EACgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,y+DAAA,EAAA,MAAA,EAAA,CAAA,wrBAAA,CAAA,EAAA,CAAA;kJAO7C,IAAI,EAAA,CAAA;sBADL,KAAK;gBAQG,MAAM,EAAA,CAAA;sBADd,MAAM;;;MEtCI,qBAAqB,CAAA;AAoBhC,IAAA,WAAA,CAAoB,UAAsB,EAAA;QAAtB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;AAnB1C;;;;AAIG;AACgB,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,YAAY,EAAY,CAAC;AAC1D;;;;;AAKG;AACgB,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,YAAY,EAAW,CAAC;AACzD;;;AAGG;QACM,IAAU,CAAA,UAAA,GAAG,SAAS,CAAC;KAEc;AAE9C;;;;;AAKG;AAEH,IAAA,MAAM,CAAC,MAAiB,EAAA;QACtB,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AAC9C,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KAC1B;AAED;;;;;AAKG;AAEH,IAAA,UAAU,CAAC,MAAiB,EAAA;QAC1B,MAAM,CAAC,cAAc,EAAE,CAAC;AACxB,QAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC7D,QAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;AAED;;;;;AAKG;AAEH,IAAA,WAAW,CAAC,MAAiB,EAAA;QAC3B,MAAM,CAAC,cAAc,EAAE,CAAC;AACxB,QAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAChE,QAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1B;8GA3DU,qBAAqB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAArB,qBAAqB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,EAAA,UAAA,EAAA,YAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,EAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,qBAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAAA;;2FAArB,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBAJjC,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,oBAAoB;AAC9B,oBAAA,UAAU,EAAE,IAAI;AACjB,iBAAA,CAAA;+EAOoB,OAAO,EAAA,CAAA;sBAAzB,MAAM;gBAOY,OAAO,EAAA,CAAA;sBAAzB,MAAM;gBAKE,UAAU,EAAA,CAAA;sBAAlB,KAAK;gBAWN,MAAM,EAAA,CAAA;sBADL,YAAY;uBAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAA;gBAchC,UAAU,EAAA,CAAA;sBADT,YAAY;uBAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAA;gBAcpC,WAAW,EAAA,CAAA;sBADV,YAAY;uBAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAA;;;MCnD1B,gBAAgB,CAAA;AAmB3B,IAAA,WAAA,CAAoB,SAAuB,EAAA;QAAvB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAc;AAlB3C;;AAEG;AACH,QAAA,IAAA,CAAA,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAEpB;;;;AAIG;QAEH,IAAW,CAAA,WAAA,GAAG,CAAC,MAAc,KAAK,CAAA,kDAAA,EAAqD,MAAM,CAAA,YAAA,EAAe,MAAM,CAAA,8pEAAA,CAAgqE,CAAC;KAOpuE;IAE/C,QAAQ,GAAA;AACN;;;AAGG;AACH,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AACjB,YAAA,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS;iBACpB,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SAC/D;KACF;8GA9BU,gBAAgB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAJ,IAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAhB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,gBAAgB,+MCZ7B,0LAIA,EAAA,MAAA,EAAA,CAAA,oEAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FDQa,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAT5B,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,cAAc,EAKZ,UAAA,EAAA,IAAI,EACC,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,0LAAA,EAAA,MAAA,EAAA,CAAA,oEAAA,CAAA,EAAA,CAAA;;;MECpC,uBAAuB,CAAA;AARpC,IAAA,WAAA,GAAA;AASE;;;AAGG;QACH,IAAK,CAAA,KAAA,GAAG,KAAK,EAAS,CAAC;AACxB,KAAA;8GANY,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAvB,uBAAuB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECXpC,qTAeA,EAAA,MAAA,EAAA,CAAA,gNAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EDPY,gBAAgB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAGf,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBARnC,SAAS;+BACE,uBAAuB,EAAA,UAAA,EAGrB,IAAI,EACP,OAAA,EAAA,CAAC,gBAAgB,CAAC,EAAA,eAAA,EACV,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,qTAAA,EAAA,MAAA,EAAA,CAAA,gNAAA,CAAA,EAAA,CAAA;;;MEgDpC,oBAAoB,CAAA;AAwC/B,IAAA,WAAA,CACU,MAAiB,EACjB,IAA0B,EAC1B,cAAsC,EAAA;QAFtC,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;QACjB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAsB;QAC1B,IAAc,CAAA,cAAA,GAAd,cAAc,CAAwB;AA1ChD;;AAEG;AACH,QAAA,IAAA,CAAA,YAAY,GAAa,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;AAM9E;;AAEG;QACH,IAAW,CAAA,WAAA,GAAG,EAAE,CAAC;AAMjB;;AAEG;QAED,IAAS,CAAA,SAAA,GAAG,IAAI,cAAc,CAAc,IAAI,EAAE,EAAE,CAAC,CAAC;AAQxD;;AAEG;QAED,IAAe,CAAA,eAAA,GAAG,EAAE,CAAC;QAEvB,IAAqB,CAAA,qBAAA,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAChD,IAAe,CAAA,eAAA,GAAG,MAAM,EAAwB,CAAC;QAOxD,MAAM,CAAC,MAAK;AACV,YAAA,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACrD,YAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC;AACtE,SAAC,CAAC,CAAC;KACJ;IAED,QAAQ,GAAA;;AAEN,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;;QAExC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACzD;AAED;;;AAGG;IACH,MAAM,aAAa,CAAC,KAAoB,EAAA;QACtC,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC/C;AAED;;;;;AAKG;IACH,cAAc,CAAC,OAAgB,EAAE,KAAoB,EAAA;QACnD,IAAI,CAAC,OAAO,EAAE;AACZ,YAAA,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO;SACR;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;KACjC;AAED;;;;;AAKG;AACH,IAAA,gBAAgB,CAAC,KAAoB,EAAA;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;YACpD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;KACtC;AAED;;;;;;AAMG;AACH,IAAA,qBAAqB,CAAC,KAAoB,EAAA;QACxC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;KACjD;AAED;;;;;AAKG;AACH,IAAA,mBAAmB,CAAC,IAAiB,EAAA;AACnC,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ;AAAE,YAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1D,aAAA,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM;AAAE,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KACzD;AAED;;;;;AAKG;AACH,IAAA,IAAI,uBAAuB,GAAA;AACzB,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;KACvE;AAED;;;;;AAKG;AACH,IAAA,WAAW,CAAC,KAAoB,EAAA;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE;AAC7D,YAAA,EAAE,EAAE,qBAAqB;AACzB,YAAA,QAAQ,EAAE,OAAO;AAClB,SAAA,CAAC,CAAC;AACH,QAAA,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAAgB,KAAI;YACjE,IAAI,OAAO,EAAE;AACX,gBAAA,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC;qBACjC,IAAI,CAAC,MAAK;AACT,oBAAA,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;AACvB,oBAAA,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;AACnD,wBAAA,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;qBAC/B;AACH,iBAAC,CAAC;AACD,qBAAA,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aAChD;AACH,SAAC,CAAC,CAAC;KACJ;AAED;;;;;;;;AAQG;IACH,YAAY,CAAC,SAAmB,EAAE,KAAa,EAAA;AAC7C,QAAA,SAAS,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;AAC7B,QAAA,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC5B;AAED;;;;;AAKG;AACH,IAAA,cAAc,CAAC,IAAY,EAAA;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC5C,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;AAAE,YAAA,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACvD;AAED;;;;;;AAMG;IACH,MAAM,kBAAkB,CAAC,IAAY,EAAA;QACnC,MAAM,UAAU,GAAqB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtE,QAAA,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC;aACzC,IAAI,CAAC,OAAO,EAAC,KAAK,EAAE,QAAQ,EAAC,KAAI;AAChC,YAAA,MAAM,QAAQ,GAAkB;gBAC9B,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;AACjD,gBAAA,IAAI,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;aACjE,CAAC;AACF,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;AACD,aAAA,KAAK,CAAC,CAAC,KAAoB,KAAI;AAC9B,YAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,OAAO,IAAI,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC;AACtC,SAAC,CAAC,CAAC;KACR;AAED;;;;;AAKG;IACH,MAAM,CAAC,OAAsB,IAAI,EAAA;AAC/B,QAAA,IAAI,OAAyB,CAAC;AAC9B,QAAA,IAAI,IAAI;YAAE,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;YAChD,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC;aAC7C,IAAI,CAAC,OAAO,EAAC,KAAK,EAAE,QAAQ,EAAC,KAAK;YACjC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;AACjD,YAAA,IAAI,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AACjE,SAAA,CAAC,CAAC;KACR;AAED;;;AAGG;IACH,eAAe,GAAA;AACb,QAAA,MAAM,iBAAiB,GAA4B;AACjD,YAAA,UAAU,EAAE,EAAE;YACd,IAAI,EAAE,IAAI,CAAC,WAAW;SACvB,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE;AAC3D,YAAA,EAAE,EAAE,0BAA0B;AAC9B,YAAA,KAAK,EAAE,OAAO;AACd,YAAA,IAAI,EAAE,iBAAiB;AACxB,SAAA,CAAC,CAAC;QACH,SAAS,CAAC,WAAW,EAAE;aAClB,IAAI,CAAC,KAAK,EAAE,CAAC;AACb,aAAA,OAAO,CAAC,CAAC,QAAsC,KAAI;AAClD,YAAA,IAAI,QAAQ,CAAC,UAAU,EAAE;AACvB,gBAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW;AAC7B,oBAAA,CAAA,EAAG,IAAI,CAAC,WAAW,CAAA,CAAA,EAAI,QAAQ,CAAC,UAAU,CAAE,CAAA,GAAG,QAAQ,CAAC,UAAU,CAAC;AACnE,gBAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC3B;AACH,SAAC,CAAC,CAAC;KACR;AAED;;;;;AAKG;IACH,MAAM,WAAW,CAAC,KAAgB,EAAA;AAChC,QAAA,IAAI,CAAC,KAAK;YAAE,OAAO;;QAGnB,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;AAC7D,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,sCAAA,CAAwC,CAAC,CAAC;YACzD,OAAO;SACR;QAED,MAAM,aAAa,GAAmB,EAAE,CAAC;QAEzC,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACpC,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc;iBAC9B,MAAM,CAAC,CAAG,EAAA,IAAI,CAAC,WAAW,CAAI,CAAA,EAAA,IAAI,CAAC,IAAI,CAAE,CAAA,CAAC,CAAC;YAEhD,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;AAC9C,iBAAA,IAAI,CAAC,CAAC,QAAQ,KAAK,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAChD,iBAAA,KAAK,CAAC,CAAC,KAAoB,KAAI;gBAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAClD,aAAC,CAAC,CAAC;SACR;QAED,IAAI,CAAC,aAAa,CAAC,MAAM;YAAE,OAAO;AAElC,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAY,SAAA,EAAA,aAAa,CAAC,MAAM,CAAI,CAAA,EAAA,aAAa,CAAC,MAAM,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO,CAAE,CAAA,EAAE,aAAa,CAAC,CAAC;KACpH;AAED;;;;AAIG;IACH,MAAM,aAAa,CAAC,MAAa,EAAA;AAC/B,QAAA,MAAM,KAAK,GACR,MAAM,CAAC,MAA2B,CAAC,KAAiB,CAAC;AACxD,QAAA,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC/B;AAED;;;;;AAKG;IACH,iBAAiB,CAAC,KAAoB,EAAE,QAAgB,EAAA;QACtD,IAAI,CAAC,IAAI,CAAC,KAAK,CACb,KAAK,CAAC,IAAI,KAAK,sBAAsB;AACnC,YAAA,sCAAsC;AACtC,YAAA,CAAA,uBAAA,EAA0B,QAAQ,CAAA,CAAA,CAAG,EACvC,KAAK,CACN,CAAC;KACH;8GA5SU,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,sBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAApB,oBAAoB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,MAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,cAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,EAAA,OAAA,EAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECzDjC,66LA0IA,EAAA,MAAA,EAAA,CAAA,0nDAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDhGI,SAAS,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACT,eAAe,EACf,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,6GAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,aAAa,EACb,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAE,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,cAAc,EACd,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,QAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,EAAA,uBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,UAAA,EAAA,QAAA,EAAA,cAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,SAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,kBAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,sCAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,wBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,oCAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,2BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,iBAAiB,8WACjB,wBAAwB,EAAA,QAAA,EAAA,wBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACxB,eAAe,EAAA,IAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACf,QAAQ,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACR,2BAA2B,EAAA,QAAA,EAAA,2BAAA,EAAA,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAC3B,qBAAqB,EAAA,QAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,CAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,SAAA,EAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACrB,uBAAuB,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACvB,OAAO,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAIE,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBArBhC,SAAS;+BACE,mBAAmB,EAAA,UAAA,EAGjB,IAAI,EACP,OAAA,EAAA;wBACP,SAAS;wBACT,eAAe;wBACf,aAAa;wBACb,cAAc;wBACd,iBAAiB;wBACjB,wBAAwB;wBACxB,eAAe;wBACf,QAAQ;wBACR,2BAA2B;wBAC3B,qBAAqB;wBACrB,uBAAuB;wBACvB,OAAO;qBACR,EACgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,66LAAA,EAAA,MAAA,EAAA,CAAA,0nDAAA,CAAA,EAAA,CAAA;gJAyB7C,SAAS,EAAA,CAAA;sBADV,KAAK;gBAOJ,YAAY,EAAA,CAAA;sBADb,KAAK;gBAOJ,eAAe,EAAA,CAAA;sBADhB,KAAK;;;AE3FR;;AAEG;;ACFH;;AAEG;;;;"}